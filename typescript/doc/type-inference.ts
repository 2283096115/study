// 类型推断
// TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型
// let x = 3;
// x = ''; // error 不能将类型“string”分配给类型“number”

// 最佳通用类型
// 当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。
let x = [0, 1, null];
// 由于最终的通用类型取自候选类型，有些时候候选类型共享相同的通用类型，但是却没有一个类型能做为所有候选类型的类型。
let zoo = [new Date(), new String(), new Number()];
// 如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，(Date | String | Number)[]
// 这里zoo需要手动添加类型 如date,string,number的共同父类型  let zoo: Object[] = [];

// 上下文类型
// TypeScript类型推论也可能按照相反的方向进行。 这被叫做“按上下文归类”。按上下文归类会发生在表达式的类型与所处的位置相关时。